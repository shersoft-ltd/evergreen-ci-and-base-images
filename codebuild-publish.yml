version: 0.2

batch:
  fast-fail: false
  build-graph:
    - identifier: node_18
      env:
        variables:
          RUNTIME: node
          VERSION: "18"
      ignore-failure: false

    - identifier: node_20
      env:
        variables:
          RUNTIME: node
          VERSION: "20"
      ignore-failure: false

    - identifier: node_ci_cd_18
      env:
        variables:
          RUNTIME: node-ci-cd
          VERSION: "18"
      ignore-failure: false

    - identifier: node_ci_cd_20
      env:
        variables:
          RUNTIME: node-ci-cd
          VERSION: "20"
      ignore-failure: false

    - identifier: python_3_11
      env:
        variables:
          RUNTIME: python
          VERSION: "3.11"
      ignore-failure: false

    - identifier: python_3_12
      env:
        variables:
          RUNTIME: python
          VERSION: "3.12"
      ignore-failure: false

phases:
  pre_build:
    commands:
      - echo Login in to Amazon ECR
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $REGISTRY

  build:
    commands:
      - echo Publish ARM image
      - docker buildx imagetools create --tag ${REGISTRY}/${RUNTIME}:${VERSION}-arm ${REGISTRY}/${RUNTIME}:draft-${VERSION}-arm-${CODEBUILD_RESOLVED_SOURCE_VERSION}

      - echo Publish X86 image
      - docker buildx imagetools create --tag ${REGISTRY}/${RUNTIME}:${VERSION}-x86 ${REGISTRY}/${RUNTIME}:draft-${VERSION}-x86-${CODEBUILD_RESOLVED_SOURCE_VERSION}

      - echo Create multi-arch image
      - docker manifest create ${REGISTRY}/${RUNTIME}:${VERSION} ${REGISTRY}/${RUNTIME}:${VERSION}-arm ${REGISTRY}/${RUNTIME}:${VERSION}-x86

      - echo Publish image
      - docker manifest push ${REGISTRY}/${RUNTIME}:${VERSION}

      - echo Delete draft tags
      - aws ecr batch-delete-image --repository-name ${RUNTIME} --image-ids imageTag=draft-${VERSION}-arm-${CODEBUILD_RESOLVED_SOURCE_VERSION} imageTag=draft-${VERSION}-x86-${CODEBUILD_RESOLVED_SOURCE_VERSION}
